import sbt._
import Keys._
import sbtassembly.Plugin._
import AssemblyKeys._

object BuildSettings {
}

object Resolvers {
  val akkaRepo = "Akka Repository" at "http://repo.akka.io/releases"
  val clouderaRepo =  "Cloudera Repository" at "https://repository.cloudera.com/artifactory/cloudera-repos"

  val commonResolvers = Seq (akkaRepo, clouderaRepo)
}

object Dependencies {
  val sparkAssembly = "org.apache.spark" % "spark-assembly_2.10" % "0.9.0-cdh5.0.0-beta-2"
  val sparkCore = "org.apache.spark" % "spark-core_2.10" % "0.9.0-cdh5.0.0-beta-2" % "provided"
  val hadoopClient = "org.apache.hadoop" % "hadoop-client" % "2.2.0-cdh5.0.0-beta-2" % "provided"
}

object Builds extends Build {
  import Resolvers._
  import Dependencies._

  val excludeCglib = ExclusionRule(organization = "org.sonatype.sisu.inject")
  val excludeJackson = ExclusionRule(organization = "org.codehaus.jackson")
  val excludeNetty = ExclusionRule(organization = "org.jboss.netty")
  val excludeAsm = ExclusionRule(organization = "asm")
  val excludeSnappy = ExclusionRule(organization = "org.xerial.snappy")
  val HBASE_VERSION = "0.96.1.1-cdh5.0.0-beta-2"

  val appDeps = Seq (
    sparkAssembly,
    sparkCore,
    hadoopClient
  )

  lazy val buildSettings = Defaults.defaultSettings ++ Seq(
    version := "0.1-SNAPSHOT",
    organization := "com.nablecomm",
    scalaVersion := "2.10.3"
  )

  lazy val rootSettings = buildSettings ++ Seq(
    name := "simple"
  )

  lazy val librarySettings = buildSettings ++ Seq(
    name := "simple-library"
  )

  lazy val appSettings = buildSettings ++ assemblySettings ++ Seq(
    name := "simple-app",
    resolvers := commonResolvers,
    libraryDependencies ++= Seq(sparkAssembly, sparkCore, hadoopClient),
    run in Compile <<= Defaults.runTask(fullClasspath in Compile, mainClass in (Compile, run), runner in (Compile,run)),
    runMain in Compile <<= Defaults.runMainTask(fullClasspath in Compile, runner in (Compile, runMain)),
    mainClass in assembly := Some("SimpleApp"),
    test in assembly := {},
    retrieveManaged in ThisBuild := true,
    mergeStrategy in assembly <<= (mergeStrategy in assembly) { (old) =>
      {
        case PathList("javax", "servlet", xs @ _*) => MergeStrategy.last
        case old if old.endsWith("package-info.class") => MergeStrategy.first
        case x => old(x)
      }
    },
    excludedJars in assembly <<= (fullClasspath in assembly) map { cp => 
      val excludes = Set(
        "activation-1.1.jar",
        //"akka-actor_2.10-2.2.3-shaded-protobuf.jar",
        //"akka-remote_2.10-2.2.3-shaded-protobuf.jar",
        //"akka-slf4j_2.10-2.2.3-shaded-protobuf.jar",
        "aopalliance-1.0.jar",
        "asm-4.0.jar",
        "asm-commons-4.0.jar",
        "asm-tree-4.0.jar",
        "avro-1.7.5-cdh5.0.0-beta-2.jar",
        "avro-ipc-1.7.5-cdh5.0.0-beta-2.jar",
        "chill-java-0.3.1.jar",
        "chill_2.10-0.3.1.jar",
        "colt-1.2.0.jar",
        "commons-beanutils-1.7.0.jar",
        "commons-beanutils-core-1.8.0.jar",
        "commons-cli-1.2.jar",
        "commons-codec-1.4.jar",
        "commons-collections-3.2.1.jar",
        "commons-compress-1.4.1.jar",
        "commons-configuration-1.6.jar",
        "commons-digester-1.8.jar",
        "commons-httpclient-3.1.jar",
        "commons-io-2.4.jar",
        "commons-lang-2.6.jar",
        "commons-logging-1.1.3.jar",
        "commons-math3-3.1.1.jar",
        "commons-net-3.1.jar",
        "compress-lzf-1.0.0.jar",
        "concurrent-1.3.4.jar",
        //"config-1.0.2.jar",
        "fastutil-6.4.4.jar",
        "gmetric4j-1.0.3.jar",
        //"guava-14.0.1.jar",
        "guice-3.0.jar",
        "hadoop-annotations-2.2.0-cdh5.0.0-beta-2.jar",
        "hadoop-auth-2.2.0-cdh5.0.0-beta-2.jar",
        //"hadoop-client-2.2.0-cdh5.0.0-beta-2.jar",
        //"hadoop-common-2.2.0-cdh5.0.0-beta-2.jar",
        //"hadoop-hdfs-2.2.0-cdh5.0.0-beta-2.jar",
        "hadoop-mapreduce-client-app-2.2.0-cdh5.0.0-beta-2.jar",
        "hadoop-mapreduce-client-common-2.2.0-cdh5.0.0-beta-2.jar",
        "hadoop-mapreduce-client-core-2.2.0-cdh5.0.0-beta-2.jar",
        "hadoop-mapreduce-client-jobclient-2.2.0-cdh5.0.0-beta-2.jar",
        "hadoop-mapreduce-client-shuffle-2.2.0-cdh5.0.0-beta-2.jar",
        "hadoop-yarn-api-2.2.0-cdh5.0.0-beta-2.jar",
        "hadoop-yarn-client-2.2.0-cdh5.0.0-beta-2.jar",
        "hadoop-yarn-common-2.2.0-cdh5.0.0-beta-2.jar",
        "hadoop-yarn-server-common-2.2.0-cdh5.0.0-beta-2.jar",
        "hadoop-yarn-server-nodemanager-2.2.0-cdh5.0.0-beta-2.jar",
        //"httpclient-4.2.5.jar",
        //"httpcore-4.2.5.jar",
        "jackson-annotations-2.2.2.jar",
        "jackson-core-2.2.2.jar",
        "jackson-core-asl-1.8.8.jar",
        "jackson-databind-2.2.2.jar",
        "jackson-jaxrs-1.8.8.jar",
        "jackson-mapper-asl-1.8.8.jar",
        "jackson-xc-1.8.8.jar",
        "jansi-1.4.jar",
        "jansi-1.9.jar",
        "javax.inject-1.jar",
        "javax.servlet-2.5.0.v201103041518.jar",
        "jaxb-api-2.2.2.jar",
        "jaxb-impl-2.2.3-1.jar",
        "jblas-1.2.3.jar",
        "jersey-client-1.9.jar",
        "jersey-core-1.9.jar",
        "jersey-guice-1.9.jar",
        "jersey-json-1.9.jar",
        "jersey-server-1.9.jar",
        "jets3t-0.7.1.jar",
        "jettison-1.1.jar",
        //"jetty-6.1.26.cloudera.2.jar",
        "jetty-continuation-7.6.8.v20121106.jar",
        "jetty-http-7.6.8.v20121106.jar",
        "jetty-io-7.6.8.v20121106.jar",
        "jetty-server-7.6.8.v20121106.jar",
        "jetty-util-6.1.26.cloudera.2.jar",
        "jetty-util-7.6.8.v20121106.jar",
        "jline-0.9.94.jar",
        "jline.jar",
        "jsr305-1.3.9.jar",
        "jul-to-slf4j-1.7.2.jar",
        "junit-4.8.1.jar",
        "kryo-2.21.jar",
        "lift-json_2.10-2.5.1.jar",
        //"log4j-1.2.17.jar",
        "mesos-0.13.0.jar",
        "metrics-core-3.0.0.jar",
        "metrics-ganglia-3.0.0.jar",
        "metrics-graphite-3.0.0.jar",
        "metrics-json-3.0.0.jar",
        "metrics-jvm-3.0.0.jar",
        "minlog-1.2.jar",
        "netty-3.6.6.Final.jar",
        //"netty-all-4.0.13.Final.jar",
        //"objenesis-1.2.jar",
        //"oncrpc-1.0.7.jar",
        "paranamer-2.4.1.jar",
        //"protobuf-java-2.4.1-shaded.jar",
        "protobuf-java-2.5.0.jar",
        "py4j-0.8.1.jar",
        "reflectasm-1.07-shaded.jar",
        //"scala-compiler.jar",
        //"scala-library.jar",
        //"scala-reflect.jar",
        "servlet-api-2.5-20081211.jar",
        "servlet-api-2.5.jar",
        //"slf4j-api-1.7.2.jar",
        //"slf4j-log4j12-1.7.2.jar",
        //"snappy-java-1.0.5.jar",
        //"spark-assembly_2.10-0.9.0-cdh5.0.0-beta-2.jar",
        "spark-bagel_2.10-0.9.0-cdh5.0.0-beta-2.jar",
        //"spark-core_2.10-0.9.0-cdh5.0.0-beta-2.jar",
        "spark-mllib_2.10-0.9.0-cdh5.0.0-beta-2.jar",
        //"spark-repl_2.10-0.9.0-cdh5.0.0-beta-2.jar",
        "spark-streaming_2.10-0.9.0-cdh5.0.0-beta-2.jar",
        "stax-api-1.0-2.jar",
        "stream-2.4.0.jar",
        "uncommons-maths-1.2.2a.jar",
        "velocity-1.7.jar",
        "xmlenc-0.52.jar",
        "xz-1.0.jar",
        "zookeeper-3.4.5.jar"
      )
      cp filter { jar => excludes(jar.data.getName) }
    }
  )

  lazy val root = Project("root", file("."), settings = rootSettings) aggregate(app)
  lazy val library = Project("library", file("library"), settings = librarySettings)
  lazy val app = Project("app", file("app"), settings = appSettings).
                  settings(net.virtualvoid.sbt.graph.Plugin.graphSettings: _*)
}
